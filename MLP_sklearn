# -*- coding: utf-8 -*-
"""
Created on Sat May  9 18:42:58 2020

@author: evera
"""


import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler


df1 = pd.read_excel('Quasi-yagi_truncado_com complementonovo.xlsx')
df2 = pd.read_excel('Quasi-yagi_truncadonovo.xlsx')
df= pd.concat([df1,df2])

data = df.copy()
x = data.drop(labels=['G1', 'G2', 'G3'], axis=1) 
y = data[['G1', 'G2', 'G3']]

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=123)
std=StandardScaler()
X_train_std=std.fit_transform(X_train)
X_test_std=std.fit_transform(X_test)

model=MLPRegressor()

param_grid={'hidden_layer_sizes':[(30,30,30)],
            'activation': ['tanh','relu','logistic'],'solver':['adam','sgd','lbfgs'], 'max_iter':[1000]}

kfold = KFold(n_splits=10)

grid_search = GridSearchCV(model,param_grid,cv=kfold,scoring='neg_mean_squared_error',verbose=1)

grid_result = grid_search.fit(X_train_std,y_train)

final_model = grid_search.best_estimator_
preds = final_model.predict(X_test_std)
rmse = np.sqrt(mean_squared_error(y_test, preds))
print("RMSE: %f" % (rmse))
